clear all
close all
%
% 1) need a list of serial numbers for instruments (see: info/notes/KELP-Dye release notes)
% 2) need the directory list for raw .rbr files
% 3) need a table of depths and deployment times (i
root_dir         = '/Users/derekgrimes/OneDriveUNCW/KELP-vingilote/';
data_dir         = [root_dir,'/data/Release1/raw/'];
archive_dir      = [root_dir,'/data/Release%d/L0/'];
instruments_file = [root_dir,'/info/dye_mixing_cals_and_releases/dye_release_instruments.csv'];
%
release_times    = readtable([root_dir,'info/dye_mixing_cals_and_releases/dye_release_times.csv']);
%               Type    , SN    , Elevation (mab)  , notes
format   = '%s %d %f %s';
fid      = fopen(instruments_file);
info     = textscan(fid,format,'delimiter',',','headerlines',1);
TYPEs    = deblank(info{1});
SNs      = info{2};
MABs     = info{3};
notes    = info{4};
% 4) need a directory to save the L0 files, but this will be release specific... so hold off
% L0_dir = [root_dir,'data/Release%d/L0/'];
% 5) loop and load data into structure, estimate density (use CTD and assume
% salt is constant)
% 6) estimate N^2 over each vertical interval
% 7) calculate the mean and standard deviation of temperature during
% each release for appropriate instrument?
idx = ismember(TYPEs,{'DUET','RBR-CTD'});
N   = sum(idx);
%
R1  = struct('Time',[],'Temperature',[],'Pressure',[],'PressureOffset',[],'Salinity',[],'Conductivity',[],'Depth_deploy',[],'mab',[]);
R23 = struct('Time',[],'Temperature',[],'Pressure',[],'PressureOffset',[],'Salinity',[],'Conductivity',[],'Depth_deploy',[],'mab',[]);
R2  = struct('Time',[],'Temperature',[],'Pressure',[],'PressureOffset',[],'Salinity',[],'Conductivity',[],'Depth_deploy',[],'mab',[]);
R3  = struct('Time',[],'Temperature',[],'Pressure',[],'PressureOffset',[],'Salinity',[],'Conductivity',[],'Depth_deploy',[],'mab',[]);
for ii = 1:N% i put the adcps at the end, so this shouldn't barf
    % get current SN
    SN   = SNs(ii);
    type = TYPEs{ii};
    mab  = MABs(ii);
    %
    % load/process... below code is from "process_moored_data.m
    switch type
      case {'RBR','SOLO','DUET'}
        rbrFileStr = sprintf([data_dir,filesep,'SN_%04d*.rsk'],SN);
        rbrFile = dir(rbrFileStr);
        fin     = [rbrFile.folder,filesep,rbrFile.name];
        % open the file, then read data
        try rsk = RSKopen(fin);
        catch
            disp(['missing data file: ', rbrFileStr])
            continue
        end
        rsk = RSKreaddata(rsk);
        rbr_time = rsk.data.tstamp;
        rbr_data = rsk.data.values;
        rbr_temp = [];
        rbr_pres = [];
        switch rsk.instruments.model(1:7)
          case 'RBRsolo'
            if ~strcmp(rsk.channels.longName,'Temperature')
                disp('RBRsolo is not a thermistor')
                keyboard
            end
            rbr_temp = rbr_data;
          case 'RBRduet'
            disp('duet')
            rbr_temp = rbr_data(:,1);
            rbr_pres = rbr_data(:,2);                
        end
        % pressure offset!
        rbr_pres_offset = mean(rbr_pres(rbr_pres<10.5 & rbr_pres>9.5),'omitnan');
        % put info into structure array
        rbr = struct('Time',rbr_time,'Temperature',rbr_temp,'Pressure',rbr_pres-rbr_pres_offset,'PressureOffset',rbr_pres_offset,'Depth_deploy',mean(rbr_pres(rbr_pres>10.5)-rbr_pres_offset),'mab',mab);
        rbr_file = [data_dir,filesep,'..',filesep,'L0',filesep,num2str(SN,'%04d')];
        % save raw data to .nc and .mat in mooring dir
        save(rbr_file,'-struct','rbr')
      case 'RBR-CTD'
        rbrFileStr = sprintf([data_dir,filesep,'%06d*.rsk'],SN);
        rbrFile = dir(rbrFileStr);
        fin     = [rbrFile.folder,filesep,rbrFile.name];
        % open the file, then read data
        try rsk = RSKopen(fin);
        catch
            disp(['missing data file: ', rbrFileStr])
            continue
        end
        rsk = RSKreaddata(rsk);
        rbr_time = rsk.data.tstamp;
        rbr_data = rsk.data.values;
        rbr_cond = rbr_data(:,1);
        rbr_temp = rbr_data(:,2);
        rbr_pres = rbr_data(:,3);
        % need to offset pressure,
        rbr_pres_offset = mean(rbr_pres(rbr_pres<10.5 & rbr_pres>9.5));
        rbr_salt = gsw_SP_from_C(rbr_cond,rbr_temp,rbr_pres-rbr_pres_offset);
        % put info into structure array
        rbr = struct('Time',rbr_time,'Temperature',rbr_temp,'Pressure',rbr_pres-rbr_pres_offset,'PressureOffset',rbr_pres_offset,'Salinity',rbr_salt,'Conductivity',rbr_cond,'Depth_deploy',mean(rbr_pres(rbr_pres>10.5)-rbr_pres_offset),'mab',mab);
        rbr_file = [data_dir,filesep,'..',filesep,'L0',filesep,num2str(SN,'%04d')];
        % save raw data to .nc and .mat in mooring dir
        save(rbr_file,'-struct','rbr')
    end
    %
    % now loop over rbr_fields to extract each release's data...
    % first get Release1,then combined Release2-Release3, then individual Release2 & Release3,
    Nt  = size(rbr.Time,1);
    iR1 = find(rbr.Time>=datenum(release_times.StartTime_UTC_(1)) & rbr.Time<=datenum(release_times.EndTime_UTC_(1)));
    iR23 = find(rbr.Time>=datenum(release_times.StartTime_UTC_(2)) & rbr.Time<=datenum(release_times.EndTime_UTC_(3)));
    iR2 = find(rbr.Time>=datenum(release_times.StartTime_UTC_(2)) & rbr.Time<=datenum(release_times.EndTime_UTC_(2)));
    iR3 = find(rbr.Time>=datenum(release_times.StartTime_UTC_(3)) & rbr.Time<=datenum(release_times.EndTime_UTC_(3)));
    % now loop over field names
    fields = fieldnames(rbr);
    fields = fields(~ismember(fields,'Time'));
    if isempty(R1.Time)
        R1(1).Time = rbr.Time(iR1);
        R2(1).Time = rbr.Time(iR2);
        R23(1).Time = rbr.Time(iR23);                
        R3(1).Time = rbr.Time(iR3);
    end
    for jj = 1:length(fields)
        field = fields{jj};
        if length(rbr.(field))==Nt
            tmp        = interp1(rbr.Time,rbr.(field),R1.Time);
            R1.(field) = cat(2,R1.(field),tmp);
            tmp        = interp1(rbr.Time,rbr.(field),R2.Time);
            R2.(field) = cat(2,R2.(field),tmp);
            tmp        = interp1(rbr.Time,rbr.(field),R23.Time);
            R23.(field) = cat(2,R23.(field),tmp);
            tmp        = interp1(rbr.Time,rbr.(field),R3.Time);
            R3.(field) = cat(2,R3.(field),tmp);
        else
            R1.(field) = cat(2,R1.(field),rbr.(field));
            R2.(field) = cat(2,R2.(field),rbr.(field));            
            R23.(field) = cat(2,R23.(field),rbr.(field));
            R3.(field) = cat(2,R3.(field),rbr.(field));
        end
    end
    % lastly archive
    release.SN{ii} = SN;
end