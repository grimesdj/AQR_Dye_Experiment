First Readme: Jason Rooker Summer 2025 
Scratch Directory: code development and testing.

Scripts to load and make quick plots:


aquaplot.m: make quick timeseries plots/histograms and output stats.

	USAGE: Stats = aquaplot(releaseNum, version, plots, binStart, binEnd)

	releaseNum = [1 2 or 3] dye release designation
	version    = ['raw', 'L0'] options for Aquadopp without/with qcFlag applied,
       		    'M1' to plot the SIG1000 at M1,
		    'Vector' to plot the Vector velocity at release
	plots      = 'on'/'off' plots timeseries and histograms for user specified release and version. (contains my own QC flag to generate simplified 'L0'); defaults to on,      	binStart/  = specify bins to iterate through; bin start and bin end default to the entire range
	binEnd   
	
	Stats      = 'Pres', avg and std pressure; 'East', avg and std East Velocity; 'North', avg and std North Velocity; 'theta', bearing of vector <'East', 'North'>; ...
			 'Mag', magnitude of vector <'East', 'North'>
       
	Calls plotRelease_func.m

plotRelease_func: (script) make quick timeseries plots/histograms

	USAGE: called by aquaplot.m
	
	Outputs figures to '..\Kelp_data\Summer2025\Rooker\figures\...'

fetch_M1.m: Load and process data from M1 ADCP with respect to user specified dye release interval

	USAGE: Data = fetch_M1(releaseNum)

	releaseNum = [1 2 or 3] dye release designation
	Data = structure formatted to match `KELP1_AquadoppHR_raw.mat`
	

rotation.m: (script) converts Vector XYZ to ENU using AquaDopp heading pitch and roll

	USAGE: called by aquaplot.m

statsTable.m: generates a table that displays stats from aquaplot
	
	USAGE: runs without taking any variables. produces a table at '..\Kelp_data\Summer2025\Rooker\tables\Stats.xlsx' with stats generated by aquaplot

multiplot.m: make quick timeseries plots to compare East and North Velocities for M1 ADCP, Vector, and AQD

	USAGE: multiPlot(releaseNum, qc)

	releaseNum = [1 2 or 3] dye release designation
	qc(optional)= 'on'/'off' quality control filter for AQD data
	
	outputs a figure with two plots of East and North velocites at 1.237 MAB

aquawrap.m: adaptation of Shcherbina et al 2018 unwrap function to fit AQD data

	USAGE: v_unwrap = aquawrap(v_wrapped, Vr)

	v_wrapped: velocity as [time x bins]
	Vr: Velocity range, can be computed by ((c^2)/(8*F^2*L))

L0_AQD.m

%   USAGE: L0_AQD(outputFile, L0Dir, L0Name)
%       outputFile = folder path and filename (no extension) to raw data
%       L0Dir = directory to save finished L0 data
%       L0Name = L0 filename (without extension) to be saved
% 
%       takes raw AQD data and performs L0 QA/QC

L0_Vector.m
% 
%   USAGE: L0_Vector(outputFile, L0Dir, L0Name)
%       outputFile = folder path and filename (no extension) to raw data
%       L0Dir = directory to save finished L0 data
%       L0Name = L0 filename (without extension) to be saved
% 
%       takes raw Vector data and performs L0 QA/QC

% load_and_process_AQD.m
% 
%   USAGE: loads AQD data from textfiles into .mat files
% 
%   (script) -> requires user to enter:
%       inputDir = Directory where textfiles are
%       inputFile = file root for AQD files
%       outputDir = Directory to save raw .mat
%       L0Dir = Directory to save L0 .mat
%       atmTime = two datetimes when instrument was in the air
%       depTime = start and end times of deployment


loadAQD.m
% 
%   USAGE: loadAQD(inputDir, inputFile, fileName, outputFile, tos, depTime, atmTime)
%       inputDir  = Directory where textfiles are
%       inputFile = file root for AQD files
%       fileName  = Directory and file root
%       outputDir = Directory to save raw .mat
%       atmTime   = [Datenum Datenum] in air
%       depTime   = [Start_time , End_time] in water
%       tos       = time offset for time zone correction

load_VECTOR_data_function.m
% 
%   USAGE: load_VECTOR_data_function(inputDir, inputFile, fileName, outputFile, tos, depTime, atmTime)
%       inputDir  = Directory where textfiles are
%       inputFile = file root for AQD files
%       fileName  = Directory and file root
%       outputDir = Directory to save raw .mat
%       atmTime   = [Datenum Datenum] in air
%       depTime   = [Start_time , End_time] in water
%       tos       = time offset for time zone correction

% load_and_process_vector.m
% 
%   USAGE: loads Vector data from textfiles into .mat files
% 
%   (script) -> requires user to enter:
%       inputDir = Directory where textfiles are
%       inputFile = file root for AQD files
%       outputDir = Directory to save raw .mat
%       L0Dir = Directory to save L0 .mat
%       atmTime = two datetimes when instrument was in the air
%       depTime = start and end times of deployment

 






